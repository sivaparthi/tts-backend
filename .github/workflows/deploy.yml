name: tts-backend-dev

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 242981001190.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: ai-voice-assistant/backend
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_DEV_QA }}
  REMOTE_USERNAME: ubuntu
  REMOTE_HOSTNAME: ec2-44-204-0-195.compute-1.amazonaws.com
  ENV: dev

jobs:
  Build_and_Deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Read version from the file
      - name: Read version from file
        id: read-version
        run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 4: Verify AWS credentials (optional, for debugging)
      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Build and Push Docker image to AWS ECR
      - name: Build and Push Docker image to AWS ECR
        run: |
          docker build -t $ECR_REPOSITORY .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$ENV-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENV-latest
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$ENV-0.1
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENV-0.1

      # Step 7: Setup SSH
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 8: Checkout and pull latest code on remote server
      - name: Checkout the code on the remote server
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_USERNAME@$REMOTE_HOSTNAME \
          "cd /home/tts-backend && git config pull.rebase false && git pull origin dev"

      # Step 9: Login to AWS ECR on remote server
      - name: Login to AWS ECR on remote server
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_USERNAME@$REMOTE_HOSTNAME \
          "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY/$ECR_REPOSITORY"

      # Step 10: Pull the latest Docker image from ECR
      - name: Pull image from AWS ECR
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_USERNAME@$REMOTE_HOSTNAME \
          "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$ENV-latest"

      # Step 11: Wait for containers to stabilize (optional)
      - name: Wait for containers to stabilize
        run: sleep 20

      # Step 12: Remove unused Docker images on the remote server
      - name: Remove unused Docker images
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_USERNAME@$REMOTE_HOSTNAME \
          "yes | docker system prune -a"
